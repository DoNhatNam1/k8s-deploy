FROM node:20-alpine AS base

# Rebuild the source code only when needed
FROM base AS builder
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
RUN apk add --no-cache libc6-compat
WORKDIR /app

ARG DOCKER_POSTGRES_PRISMA_AWS_URL $DOCKER_POSTGRES_PRISMA_AWS_URL
ARG NEXT_PUBLIC_FIREBASE_API_KEY $NEXT_PUBLIC_FIREBASE_API_KEY
ARG NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN $NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN
ARG NEXT_PUBLIC_FIREBASE_PROJECT_ID $NEXT_PUBLIC_FIREBASE_PROJECT_ID
ARG NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET $NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET
ARG NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID $NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID
ARG NEXT_PUBLIC_FIREBASE_APP_ID $NEXT_PUBLIC_FIREBASE_APP_ID
ARG NEXT_PUBLIC_FIREBASE_MESUREMENT_ID $NEXT_PUBLIC_FIREBASE_MESUREMENT_ID
ARG NEXT_PUBLIC_AGENCY_DASHBOARD_HOSTNAME_PATH $NEXT_PUBLIC_AGENCY_DASHBOARD_HOSTNAME_PATH
ARG COOKIES_TOKEN_NAME $COOKIES_TOKEN_NAME
ARG COOKIES_SIGNUP_STEP_ONE_DATA_NAME $COOKIES_SIGNUP_STEP_ONE_DATA_NAME
ARG SECRET_KEY $SECRET_KEY


COPY package.json package-lock.json ./
RUN npm ci

COPY . .

RUN npx prisma generate

RUN npx nx run build --project=agency-dashboard --configuration=production

# Production image, copy all the files and run next
FROM base AS runner
WORKDIR /app

ENV NODE_ENV production

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs


COPY --from=builder --chown=nextjs:nodejs /app/dist/apps/agency-dashboard/package.json ./
COPY --from=builder --chown=nextjs:nodejs /app/prisma ./
RUN npm i --omit=dev
RUN npx next telemetry disable
RUN npx prisma generate
RUN rm -rf schema.prisma

# Automatically leverage output traces to reduce image size
# https://nextjs.org/docs/advanced-features/output-file-tracing
COPY --from=builder --chown=nextjs:nodejs /app/dist/apps/agency-dashboard/ ./
COPY --from=builder --chown=nextjs:nodejs /app/dist/apps/agency-dashboard/.next ./.next
USER nextjs

EXPOSE 4200

CMD ["npm", "start"]